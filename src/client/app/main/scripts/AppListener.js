class AppListener {
    constructor(app) {
        this.app = app;
        this.toast = new VanillaToast(document.body);
    }
    showLoading() {
        let nprogressConfig = { parent: "body", showSpinner: false };
        NProgress.configure(nprogressConfig);
        NProgress.start();
    }
    hideLoading() {
        NProgress.done();
    }
    showFullPageLoading(message) {
        LoaderFullScreen.show(message);
    }
    hideFullPageLoading() {
        LoaderFullScreen.hide();
    }
    showToastSuccess(title, msg) {
        this.toast.showSuccess(title, msg);
    }
    showToastInfo(title, msg) {
        this.toast.showInfo(title, msg);
    }
    showToastError(title, msg) {
        this.toast.showError(title, msg);
    }
    reloadPage() {
        this.app.linksLoader.reloadPage();
    }
    openLink(url) {
        this.app.linksLoader.openLink(url);
    }
    setupForms() {
        let forms = $("form[data-parsley-validate]");
        if (forms.length) {
            try {
                forms.parsley({ excluded: ":disabled" }).reset();
            }
            catch (err) { }
            $(".parsley-errors-list").remove();
            $.listen("parsley:field:validated", function (fieldInstance) {
                if (fieldInstance.$element.is(":hidden") && fieldInstance.$element.attr("validate") === undefined) {
                    fieldInstance._ui.$errorsWrapper.css("display", "none");
                    fieldInstance.validationResult = true;
                    return true;
                }
            });
        }
    }
    getErrorMessageFromResponse(msg) {
        let result = msg;
        try {
            if (msg.indexOf("msg")) {
                result = "";
                let errors = JSON.parse(msg);
                if (errors.length > 0) {
                    for (let error of errors) {
                        result += error.msg + " ";
                    }
                }
                else {
                    result = errors.msg;
                }
            }
        }
        catch (err) {
            return result;
        }
        return result;
    }
    updateUrl(url) {
        if (history.replaceState)
            history.replaceState($.pjax.state, document.title, url);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvYXBwL21haW4vc2NyaXB0cy9BcHBMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQTtJQUlFLFlBQVksR0FBUTtRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFJRCxXQUFXO1FBQ1QsSUFBSSxlQUFlLEdBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNsRSxTQUFTLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsV0FBVztRQUNULFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBSUQsbUJBQW1CLENBQUMsT0FBZTtRQUNqQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBSUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLEdBQVc7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBYSxFQUFFLEdBQVc7UUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBYSxFQUFFLEdBQVc7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFJRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sVUFBVTtRQUNmLElBQUksS0FBSyxHQUFRLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRWxELElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUVoQixJQUFJO2dCQUNGLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNsRDtZQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUU7WUFFaEIsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7WUFHbkMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxVQUFTLGFBQWE7Z0JBQ3hELElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUNqRyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUN4RCxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO29CQUN0QyxPQUFPLElBQUksQ0FBQztpQkFDYjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sMkJBQTJCLENBQUMsR0FBVztRQUM1QyxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFFakIsSUFBSTtZQUNGLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFDWixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNyQixLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTt3QkFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO3FCQUMzQjtpQkFDRjtxQkFBTTtvQkFDTCxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDckI7YUFDRjtTQUNGO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLFNBQVMsQ0FBQyxHQUFHO1FBQ2xCLElBQUksT0FBTyxDQUFDLFlBQVk7WUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEYsQ0FBQztDQUNGIiwiZmlsZSI6InNyYy9jbGllbnQvYXBwL21haW4vc2NyaXB0cy9BcHBMaXN0ZW5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJBcHAudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uLy4uL2NsaWVudC1saWJzL25vZGVfbW9kdWxlcy9Aa2dhZHppbm93c2tpL3ZhbmlsbGEtdG9hc3Qvc3JjL3NjcmlwdHMvVmFuaWxsYVRvYXN0LnRzXCIgLz5cblxuaW50ZXJmYWNlIEpRdWVyeVN0YXRpYyB7XG4gIGxpc3RlbjogYW55O1xufVxuXG5kZWNsYXJlIGxldCBSYXZlbjogYW55O1xuXG5jbGFzcyBBcHBMaXN0ZW5lciB7XG4gIGFwcDogQXBwO1xuICB0b2FzdDogVmFuaWxsYVRvYXN0O1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy50b2FzdCA9IG5ldyBWYW5pbGxhVG9hc3QoZG9jdW1lbnQuYm9keSk7XG4gIH1cblxuICAvKiBVSSAqL1xuXG4gIHNob3dMb2FkaW5nKCkge1xuICAgIGxldCBucHJvZ3Jlc3NDb25maWc6IGFueSA9IHsgcGFyZW50OiBcImJvZHlcIiwgc2hvd1NwaW5uZXI6IGZhbHNlIH07XG4gICAgTlByb2dyZXNzLmNvbmZpZ3VyZShucHJvZ3Jlc3NDb25maWcpO1xuICAgIE5Qcm9ncmVzcy5zdGFydCgpO1xuICB9XG5cbiAgaGlkZUxvYWRpbmcoKSB7XG4gICAgTlByb2dyZXNzLmRvbmUoKTtcbiAgfVxuXG4gIC8qIEZ1bGwgcGFnZSBsb2FkZXIgKi9cblxuICBzaG93RnVsbFBhZ2VMb2FkaW5nKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIExvYWRlckZ1bGxTY3JlZW4uc2hvdyhtZXNzYWdlKTtcbiAgfVxuXG4gIGhpZGVGdWxsUGFnZUxvYWRpbmcoKSB7XG4gICAgTG9hZGVyRnVsbFNjcmVlbi5oaWRlKCk7XG4gIH1cblxuICAvKiBUb2FzdCAqL1xuXG4gIHNob3dUb2FzdFN1Y2Nlc3ModGl0bGU6IHN0cmluZywgbXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRvYXN0LnNob3dTdWNjZXNzKHRpdGxlLCBtc2cpO1xuICB9XG5cbiAgc2hvd1RvYXN0SW5mbyh0aXRsZTogc3RyaW5nLCBtc2c6IHN0cmluZykge1xuICAgIHRoaXMudG9hc3Quc2hvd0luZm8odGl0bGUsIG1zZyk7XG4gIH1cblxuICBzaG93VG9hc3RFcnJvcih0aXRsZTogc3RyaW5nLCBtc2c6IHN0cmluZykge1xuICAgIHRoaXMudG9hc3Quc2hvd0Vycm9yKHRpdGxlLCBtc2cpO1xuICB9XG5cbiAgLyogT3RoZXIgKi9cblxuICByZWxvYWRQYWdlKCkge1xuICAgIHRoaXMuYXBwLmxpbmtzTG9hZGVyLnJlbG9hZFBhZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBvcGVuTGluayh1cmw6IHN0cmluZykge1xuICAgIHRoaXMuYXBwLmxpbmtzTG9hZGVyLm9wZW5MaW5rKHVybCk7XG4gIH1cblxuICBwdWJsaWMgc2V0dXBGb3JtcygpIHtcbiAgICBsZXQgZm9ybXM6IGFueSA9ICQoXCJmb3JtW2RhdGEtcGFyc2xleS12YWxpZGF0ZV1cIik7XG5cbiAgICBpZiAoZm9ybXMubGVuZ3RoKSB7XG4gICAgICAvLyBTZXR1cCBmb3JtIGFuZCByZXNldCBwcmV2aW91cyBzdGF0ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9ybXMucGFyc2xleSh7IGV4Y2x1ZGVkOiBcIjpkaXNhYmxlZFwiIH0pLnJlc2V0KCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgICAgICQoXCIucGFyc2xleS1lcnJvcnMtbGlzdFwiKS5yZW1vdmUoKTtcblxuICAgICAgLy8gRG9uJ3QgdmFsaWRhdGUgaGlkZGVuIGZpZWxkc1xuICAgICAgJC5saXN0ZW4oXCJwYXJzbGV5OmZpZWxkOnZhbGlkYXRlZFwiLCBmdW5jdGlvbihmaWVsZEluc3RhbmNlKSB7XG4gICAgICAgIGlmIChmaWVsZEluc3RhbmNlLiRlbGVtZW50LmlzKFwiOmhpZGRlblwiKSAmJiBmaWVsZEluc3RhbmNlLiRlbGVtZW50LmF0dHIoXCJ2YWxpZGF0ZVwiKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZmllbGRJbnN0YW5jZS5fdWkuJGVycm9yc1dyYXBwZXIuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgZmllbGRJbnN0YW5jZS52YWxpZGF0aW9uUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldEVycm9yTWVzc2FnZUZyb21SZXNwb25zZShtc2c6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdCA9IG1zZztcblxuICAgIHRyeSB7XG4gICAgICBpZiAobXNnLmluZGV4T2YoXCJtc2dcIikpIHtcbiAgICAgICAgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgbGV0IGVycm9ycyA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgZXJyb3Igb2YgZXJyb3JzKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gZXJyb3IubXNnICsgXCIgXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGVycm9ycy5tc2c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVVcmwodXJsKSB7XG4gICAgaWYgKGhpc3RvcnkucmVwbGFjZVN0YXRlKSBoaXN0b3J5LnJlcGxhY2VTdGF0ZSgkLnBqYXguc3RhdGUsIGRvY3VtZW50LnRpdGxlLCB1cmwpO1xuICB9XG59XG4iXX0=
