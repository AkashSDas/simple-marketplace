class PageInvoiceDetails {
    constructor(listener) {
        this.listener = listener;
    }
    getPageId() {
        return "page-invoice";
    }
    execute() {
        $(".btn-copy")
            .off("click")
            .on("click", event => {
            const button = $(event.currentTarget);
            const email = button.attr("data-copy");
            CopyText.toClipboard(email);
        });
        this.loadStipeData();
        this.setupStripeCheckout();
        this.setupNewCardOption();
        if (this.isCardPaymentPending) {
            this.refreshPageInAMonent();
        }
    }
    closePage() { }
    onDialogClosed() { }
    refreshPageInAMonent() {
        const refreshPageDelayMs = 3000;
        const self = this;
        setTimeout(() => {
            self.listener.reloadPage();
        }, refreshPageDelayMs);
    }
    enableForm() {
        this.listener.hideLoading();
        $(".btn-payment").removeAttr("disabled");
    }
    disableForm() {
        this.listener.showLoading();
        $(".btn-payment").attr("disabled", "true");
    }
    loadStipeData() {
        this.stripePublishableApiKey = $("input[name='stripePublishableKey'").val();
        this.invoiceId = $("input[name='invoiceId'").val();
        this.invoiceTitle = $("input[name='invoiceTitle'").val();
        this.invoiceDescription = $("input[name='invoiceDescription'").val();
        this.invoiceTotalAmount = $("input[name='invoiceTotalAmount'").val();
        this.isCardPaymentPending = $("input[name='isCardPaymentPending'").val() === "true";
    }
    pickNewCard() {
        this.stripeCheckoutHandler.open({
            name: this.invoiceTitle,
            description: this.invoiceDescription,
            zipCode: true,
            amount: parseInt(this.invoiceTotalAmount)
        });
    }
    setupNewCardOption() {
        const self = this;
        $(".btn-pay-card")
            .off("click")
            .on("click", event => {
            let disabled = $(".btn-pay-card:first").attr("disabled");
            if (disabled)
                return;
            self.pickNewCard();
            event.preventDefault();
        });
    }
    onCardProcessedSuccessfully(url) {
        const self = this;
        if (url) {
            window.location.replace(url);
        }
        else {
            this.enableForm();
            this.listener.hideFullPageLoading();
            $(".msg-error").remove();
            $(".payment-info").remove();
            $(".btn-payment").remove();
            $(".msg-payment-succeeded").removeClass("hide");
            const reloadTimeoutMs = 1500;
            setTimeout(() => {
                self.listener.reloadPage();
            }, reloadTimeoutMs);
        }
    }
    onCardProcessedFailed(responseText) {
        this.enableForm();
        this.listener.hideFullPageLoading();
        $(".msg-error").removeClass("hide");
        try {
            responseText = JSON.parse(responseText);
        }
        catch (error) {
        }
        if (responseText.msg)
            responseText = responseText.msg;
        $(".msg-error-custom:first").html(responseText);
        this.enableForm();
    }
    setupStripeCheckout() {
        const self = this;
        self.stripeCheckoutHandler = StripeCheckout.configure({
            key: this.stripePublishableApiKey,
            image: window.location.protocol + "//" + window.location.host + "/src/client/app/main/assets/favicon-144.png",
            locale: "auto",
            token: function (token) {
                self.disableForm();
                self.listener.showFullPageLoading("Processing payment");
                $.ajax({
                    url: "/api/v1/payment/charge",
                    method: "POST",
                    data: {
                        stripeToken: token,
                        invoiceId: self.invoiceId
                    }
                })
                    .done(function (properties) {
                    self.onCardProcessedSuccessfully(properties.url);
                })
                    .fail(function (jqXHR, textStatus) {
                    self.onCardProcessedFailed(jqXHR.responseText);
                });
            }
        });
        window.addEventListener("popstate", function () {
            self.stripeCheckoutHandler.close();
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
