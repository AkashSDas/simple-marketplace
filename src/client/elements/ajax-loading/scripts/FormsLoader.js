class FormsLoader extends BaseLoader {
    constructor() {
        super(...arguments);
        this._isLoading = false;
        this.focusedElementId = null;
    }
    static getInstance() {
        if (!FormsLoader.instance) {
            FormsLoader.instance = new FormsLoader();
        }
        return FormsLoader.instance;
    }
    init(isOtherLoadingCallback, triggerOn, mainContainerId) {
        const self = this;
        this.triggerOn = triggerOn;
        this.isOtherLoadingCallback = isOtherLoadingCallback;
        this.mainContainerId = mainContainerId;
        $("body").on("pjax:start", function () { });
        $("body").on("pjax:end", function () { });
        $(document).on("submit", triggerOn, function (event) {
            event.preventDefault();
            self.submitForm(event);
        });
    }
    cleanListeners() {
        this._isLoading = false;
        $("body").off("pjax:complete");
        $("body").off("pjax:error");
        $("body").off("pjax:timeout");
    }
    submitForm(event) {
        const self = this;
        $("body")
            .off("pjax:complete")
            .on("pjax:complete", function () {
            self.cleanListeners();
            self.focusOnPreviousElement();
            self.onLoadFinishCallback(true);
            $(window).scrollTop(self.windowScrollPx);
        });
        $("body")
            .off("pjax:error")
            .on("pjax:error", function (event, xhr, textStatus, errorThrown, options) {
            event.preventDefault();
            self.cleanListeners();
            options.success(xhr.responseText, textStatus, xhr);
            self.cancelRequest(xhr);
            self.onLoadFinishCallback(false);
            return false;
        });
        $("body")
            .off("pjax:timeout")
            .on("pjax:timeout", function (event, xhr, options) {
            event.preventDefault();
            self.cleanListeners();
            self.cancelRequest(xhr);
            self.onLoadFinishCallback(false);
        });
        self._isLoading = true;
        if (document.activeElement) {
            self.focusedElementId = document.activeElement.getAttribute("id");
        }
        self.windowScrollPx = $(window).scrollTop();
        const containerId = self.mainContainerId;
        $.pjax.submit(event, containerId);
        let form = $(event.currentTarget);
        self.onFormLoadStartedCallback(form);
        self.onLoadStartedCallback(true);
    }
    setCancelRequest(cancelRequest) {
        this.cancelRequest = cancelRequest;
    }
    isLoading() {
        return this._isLoading;
    }
    stopLoading() {
        if (!this._isLoading)
            return;
        this.cleanListeners();
        this.cancelRequest();
    }
    setOnLoadStartedListener(callback) {
        this.onLoadStartedCallback = (isNewPage = false, isReloadingPreviousPage) => {
            callback(isNewPage, isReloadingPreviousPage);
        };
    }
    setOnLoadFinishedListener(callback) {
        this.onLoadFinishCallback = success => {
            callback(success);
        };
    }
    setOnFormLoadStartedListener(callback) {
        this.onFormLoadStartedCallback = (form) => {
            callback(form);
        };
    }
    notifyPageChange() { }
    focusOnPreviousElement() {
        const self = this;
        if (self.focusedElementId) {
            let newFocusElement = document.getElementById(self.focusedElementId);
            if (!newFocusElement)
                return;
            newFocusElement.focus();
            if (newFocusElement.value) {
                let currentValue = newFocusElement.value;
                newFocusElement.value = "";
                newFocusElement.value = currentValue;
            }
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
