class MainLoader {
    constructor() {
        this._isLoading = false;
        this._isLoading = false;
    }
    static getInstance() {
        if (!MainLoader.instance) {
            MainLoader.instance = new MainLoader();
        }
        return MainLoader.instance;
    }
    init(mainContainerId, onPageChangeStart, onPageChangeFinish, onUpdatePageMeta = null) {
        this.mainContainerId = mainContainerId;
        this.onPageChangeStart = onPageChangeStart;
        this.onPageChangeFinish = onPageChangeFinish;
        this.onUpdatePageMeta = onUpdatePageMeta;
        if (!this.onUpdatePageMeta)
            this.onUpdatePageMeta = this.defaultOnUpdatePageMeta;
        this.scrollToAnchorLink();
    }
    addLoader(loader, triggerOn) {
        const self = this;
        loader.init(self.isLoading, triggerOn, self.mainContainerId);
        MainLoader.loaders.push(loader);
        loader.setOnLoadStartedListener((isNewPage, isReloadingPreviousPage) => {
            self.onLoadStarted(isNewPage, isReloadingPreviousPage);
        });
        loader.setOnLoadFinishedListener(success => {
            self.onLoadFinish(success);
        });
        loader.setCancelRequest(self.cancelXhrRequest);
    }
    cancelXhrRequest(xhrRequest) {
        if (!xhrRequest)
            xhrRequest = $.pjax.xhr;
        if (!xhrRequest)
            return;
        xhrRequest.onreadystatechange = $.noop;
        xhrRequest.abort();
    }
    isLoading() {
        return this._isLoading;
    }
    stopLoading() {
        if (!this._isLoading)
            return;
        this._isLoading = false;
        for (const loader of MainLoader.loaders) {
            loader.stopLoading();
        }
    }
    onLoadStarted(isNewPage, isReloadingPreviousPage = false) {
        this._isLoading = true;
        this.onPageChangeStart(isNewPage, isReloadingPreviousPage);
    }
    onLoadFinish(success) {
        this._isLoading = false;
        this.onPageChangeFinish(success);
        this.scrollToAnchorLink();
        for (let i = 0; i < MainLoader.loaders.length; i++) {
            let loader = MainLoader.loaders[i];
            loader.notifyPageChange();
        }
        this.onUpdatePageMeta();
    }
    defaultOnUpdatePageMeta() {
        this.updateTitleMeta();
        this.updateKeywordsMeta();
        this.updateDescriptionMeta();
        this.updateContent("#loadedMenu", "header");
    }
    updateTitleMeta(selectorTitle = "#loadedTitle") {
        if ($(selectorTitle).length > 0) {
            document.title = $(selectorTitle).html();
            $(selectorTitle).remove();
        }
    }
    updateKeywordsMeta(selectorKeywords = "#loadedKeywords") {
        if ($(selectorKeywords).length > 0) {
            $("meta[name=Keywords]").remove();
            $("head").append('<meta name="Keywords" content="' + $(selectorKeywords).html() + '">');
            $(selectorKeywords).remove();
        }
    }
    updateDescriptionMeta(selectorDescription = "#loadedDescription") {
        if ($(selectorDescription).length > 0) {
            $("meta[name=Description]").remove();
            $("head").append('<meta name="Description" content="' + $(selectorDescription).html() + '">');
            $(selectorDescription).remove();
        }
    }
    updateContent(loadedSelector, contentSelector) {
        let isLoaded = $(loadedSelector)
            .eq(0)
            .text()
            .trim().length > 0;
        if (isLoaded) {
            let newContent = $(loadedSelector).html();
            $(loadedSelector).remove();
            let contentSelectors = $(contentSelector);
            let removeCount = contentSelectors.length - 1;
            for (let i = 0; i < removeCount; i++) {
                contentSelectors[i].remove();
            }
            $(contentSelector).replaceWith($(newContent));
        }
    }
    scrollToAnchorLink() {
        if (window.location.hash) {
            let isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
            if (isChrome) {
                setTimeout(function () {
                    let hash = window.location.hash;
                    window.location.hash = "";
                    window.location.hash = hash;
                }, 300);
            }
        }
    }
}
MainLoader.loaders = new Array();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
