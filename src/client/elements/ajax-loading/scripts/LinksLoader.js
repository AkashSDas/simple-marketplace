class LinksLoader extends BaseLoader {
    constructor() {
        super(...arguments);
        this._isLoading = false;
    }
    static getInstance() {
        if (!LinksLoader.instance) {
            LinksLoader.instance = new LinksLoader();
        }
        return LinksLoader.instance;
    }
    init(isOtherLoadingCallback, triggerOn, mainContainerId) {
        const self = this;
        this.triggerOn = triggerOn;
        this.mainContainerId = mainContainerId;
        this.isOtherLoadingCallback = isOtherLoadingCallback;
        $("body").on("pjax:start", function () { });
        $("body").on("pjax:end", function () { });
        $("body")
            .off("click", self.triggerOn)
            .on("click", self.triggerOn, function (event) {
            event.preventDefault();
            let url = event.currentTarget.href;
            self.openLink(url);
            return false;
        });
        this.reloadOnGoingBack();
    }
    setCancelRequest(cancelRequest) {
        this.cancelRequest = cancelRequest;
    }
    isLoading() {
        return this._isLoading;
    }
    setOnLoadStartedListener(callback) {
        this.onLoadStartedCallback = (isNewPage, isReloadingPreviousPage) => {
            callback(isNewPage, isReloadingPreviousPage);
        };
    }
    setOnLoadFinishedListener(callback) {
        this.onLoadFinishCallback = success => {
            callback(success);
        };
    }
    reloadPage(isReloadingPreviousPage = false) {
        if (!this.isOtherLoadingCallback()) {
            this.onLoadStartedCallback(false, isReloadingPreviousPage);
            this.addOnFinishListeners();
            $.pjax.reload(this.mainContainerId, null);
            return true;
        }
        return false;
    }
    notifyPageChange() { }
    openLink(url, skipSavingHistory = false) {
        this.addOnFinishListeners();
        const self = this;
        if (!url || url === "#") {
            return false;
        }
        if (self.isOtherLoadingCallback()) {
            return false;
        }
        if (url === window.location.href && history.pushState) {
            return false;
        }
        self._isLoading = true;
        self.onLoadStartedCallback(true, false);
        $.pjax({
            url: url,
            scrollTo: 0,
            container: self.mainContainerId
        });
    }
    stopLoading() {
        if (!this._isLoading)
            return;
        this.cleanListeners();
        this.cancelRequest();
    }
    cleanListeners() {
        this._isLoading = false;
        $("body").off("pjax:complete");
        $("body").off("pjax:error");
        $("body").off("pjax:timeout");
    }
    addOnFinishListeners() {
        const self = this;
        $("body")
            .off("pjax:complete")
            .on("pjax:complete", function () {
            self.cleanListeners();
            self.onLoadFinishCallback(true);
        });
        $("body")
            .off("pjax:error")
            .on("pjax:error", function (event, xhr, textStatus, errorThrown, options) {
            event.preventDefault();
            self.cleanListeners();
            options.success(xhr.responseText, textStatus, xhr);
            self.cancelRequest(xhr);
            self.onLoadFinishCallback(false);
            return false;
        });
        $("body")
            .off("pjax:timeout")
            .on("pjax:timeout", function (event, xhr, options) {
            event.preventDefault();
            self.cleanListeners();
            self.cancelRequest(xhr);
            const currentUrl = document.location.href;
            document.location.href = currentUrl;
            self.onLoadFinishCallback(false);
        });
    }
    reloadOnGoingBack() {
        const self = this;
        window.onpopstate = function (event) {
            self.reloadPage(true);
        };
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvZWxlbWVudHMvYWpheC1sb2FkaW5nL3NjcmlwdHMvTGlua3NMb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsaUJBQWtCLFNBQVEsVUFBVTtJQUFwQzs7UUFPVSxlQUFVLEdBQVksS0FBSyxDQUFDO0lBMkp0QyxDQUFDO0lBdkpRLE1BQU0sQ0FBQyxXQUFXO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1lBQ3pCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztTQUMxQztRQUVELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRU0sSUFBSSxDQUFDLHNCQUEyQixFQUFFLFNBQWMsRUFBRSxlQUF1QjtRQUM5RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDO1FBRXJELENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLGNBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsY0FBWSxDQUFDLENBQUMsQ0FBQztRQUd4QyxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQ04sR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQzVCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFTLEtBQVU7WUFDOUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBRXZCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1lBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbkIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxhQUF5QztRQUMvRCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRU0sU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRU0sd0JBQXdCLENBQUMsUUFBd0U7UUFDdEcsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsU0FBUyxFQUFFLHVCQUF1QixFQUFFLEVBQUU7WUFDbEUsUUFBUSxDQUFDLFNBQVMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTSx5QkFBeUIsQ0FBQyxRQUFhO1FBQzVDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxPQUFPLENBQUMsRUFBRTtZQUNwQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVNLFVBQVUsQ0FBQywwQkFBbUMsS0FBSztRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLGdCQUFnQixLQUFJLENBQUM7SUFFckIsUUFBUSxDQUFDLEdBQVcsRUFBRSxvQkFBNkIsS0FBSztRQUM3RCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUU1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO1lBRXZCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxFQUFFO1lBRWpDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLEdBQUcsS0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBRXJELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDTCxHQUFHLEVBQUUsR0FBRztZQUNSLFFBQVEsRUFBRSxDQUFDO1lBQ1gsU0FBUyxFQUFFLElBQUksQ0FBQyxlQUFlO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU87UUFDN0IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU8sY0FBYztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUVsQixDQUFDLENBQUMsTUFBTSxDQUFDO2FBQ04sR0FBRyxDQUFDLGVBQWUsQ0FBQzthQUNwQixFQUFFLENBQUMsZUFBZSxFQUFFO1lBQ25CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFTCxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQ04sR0FBRyxDQUFDLFlBQVksQ0FBQzthQUNqQixFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU87WUFDckUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7UUFFTCxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQ04sR0FBRyxDQUFDLGNBQWMsQ0FBQzthQUNuQixFQUFFLENBQUMsY0FBYyxFQUFFLFVBQVMsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPO1lBQzlDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUd4QixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUMxQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7WUFFcEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFFbEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFTLEtBQUs7WUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJmaWxlIjoic3JjL2NsaWVudC9lbGVtZW50cy9hamF4LWxvYWRpbmcvc2NyaXB0cy9MaW5rc0xvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJCYXNlTG9hZGVyLnRzXCIgLz5cblxuaW50ZXJmYWNlIEpRdWVyeVN0YXRpYyB7XG4gIHBqYXg6IGFueTtcbn1cblxuY2xhc3MgTGlua3NMb2FkZXIgZXh0ZW5kcyBCYXNlTG9hZGVyIHtcbiAgcHJpdmF0ZSBpc090aGVyTG9hZGluZ0NhbGxiYWNrOiBhbnk7XG4gIHByaXZhdGUgb25Mb2FkU3RhcnRlZENhbGxiYWNrOiAoaXNOZXdQYWdlOiBib29sZWFuLCBpc1JlbG9hZGluZ1ByZXZpb3VzUGFnZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgcHJpdmF0ZSBvbkxvYWRGaW5pc2hDYWxsYmFjazogYW55O1xuICBwcml2YXRlIHRyaWdnZXJPbjogYW55O1xuICBwcml2YXRlIG1haW5Db250YWluZXJJZDogc3RyaW5nO1xuICBwcml2YXRlIGNhbmNlbFJlcXVlc3Q6ICh4aHJSZXF1ZXN0PzogYW55KSA9PiB2b2lkO1xuICBwcml2YXRlIF9pc0xvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBzdGF0aWMgaW5zdGFuY2U6IExpbmtzTG9hZGVyO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgaWYgKCFMaW5rc0xvYWRlci5pbnN0YW5jZSkge1xuICAgICAgTGlua3NMb2FkZXIuaW5zdGFuY2UgPSBuZXcgTGlua3NMb2FkZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTGlua3NMb2FkZXIuaW5zdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgaW5pdChpc090aGVyTG9hZGluZ0NhbGxiYWNrOiBhbnksIHRyaWdnZXJPbjogYW55LCBtYWluQ29udGFpbmVySWQ6IHN0cmluZyk6IGFueSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy50cmlnZ2VyT24gPSB0cmlnZ2VyT247XG4gICAgdGhpcy5tYWluQ29udGFpbmVySWQgPSBtYWluQ29udGFpbmVySWQ7XG4gICAgdGhpcy5pc090aGVyTG9hZGluZ0NhbGxiYWNrID0gaXNPdGhlckxvYWRpbmdDYWxsYmFjaztcblxuICAgICQoXCJib2R5XCIpLm9uKFwicGpheDpzdGFydFwiLCBmdW5jdGlvbigpIHt9KTtcbiAgICAkKFwiYm9keVwiKS5vbihcInBqYXg6ZW5kXCIsIGZ1bmN0aW9uKCkge30pO1xuXG4gICAgLy8gRGlzYWJsZSBkZWZhdWx0IGJlaGF2aW91clxuICAgICQoXCJib2R5XCIpXG4gICAgICAub2ZmKFwiY2xpY2tcIiwgc2VsZi50cmlnZ2VyT24pXG4gICAgICAub24oXCJjbGlja1wiLCBzZWxmLnRyaWdnZXJPbiwgZnVuY3Rpb24oZXZlbnQ6IGFueSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGxldCB1cmwgPSBldmVudC5jdXJyZW50VGFyZ2V0LmhyZWY7XG4gICAgICAgIHNlbGYub3BlbkxpbmsodXJsKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcblxuICAgIHRoaXMucmVsb2FkT25Hb2luZ0JhY2soKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDYW5jZWxSZXF1ZXN0KGNhbmNlbFJlcXVlc3Q6ICh4aHJSZXF1ZXN0PzogYW55KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5jYW5jZWxSZXF1ZXN0ID0gY2FuY2VsUmVxdWVzdDtcbiAgfVxuXG4gIHB1YmxpYyBpc0xvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9hZGluZztcbiAgfVxuXG4gIHB1YmxpYyBzZXRPbkxvYWRTdGFydGVkTGlzdGVuZXIoY2FsbGJhY2s6IChpc05ld1BhZ2U6IGJvb2xlYW4sIGlzUmVsb2FkaW5nUHJldmlvdXNQYWdlOiBib29sZWFuKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5vbkxvYWRTdGFydGVkQ2FsbGJhY2sgPSAoaXNOZXdQYWdlLCBpc1JlbG9hZGluZ1ByZXZpb3VzUGFnZSkgPT4ge1xuICAgICAgY2FsbGJhY2soaXNOZXdQYWdlLCBpc1JlbG9hZGluZ1ByZXZpb3VzUGFnZSk7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRPbkxvYWRGaW5pc2hlZExpc3RlbmVyKGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm9uTG9hZEZpbmlzaENhbGxiYWNrID0gc3VjY2VzcyA9PiB7XG4gICAgICBjYWxsYmFjayhzdWNjZXNzKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHJlbG9hZFBhZ2UoaXNSZWxvYWRpbmdQcmV2aW91c1BhZ2U6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5pc090aGVyTG9hZGluZ0NhbGxiYWNrKCkpIHtcbiAgICAgIHRoaXMub25Mb2FkU3RhcnRlZENhbGxiYWNrKGZhbHNlLCBpc1JlbG9hZGluZ1ByZXZpb3VzUGFnZSk7XG4gICAgICB0aGlzLmFkZE9uRmluaXNoTGlzdGVuZXJzKCk7XG4gICAgICAkLnBqYXgucmVsb2FkKHRoaXMubWFpbkNvbnRhaW5lcklkLCBudWxsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBub3RpZnlQYWdlQ2hhbmdlKCkge31cblxuICBwdWJsaWMgb3BlbkxpbmsodXJsOiBzdHJpbmcsIHNraXBTYXZpbmdIaXN0b3J5OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLmFkZE9uRmluaXNoTGlzdGVuZXJzKCk7XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGlmICghdXJsIHx8IHVybCA9PT0gXCIjXCIpIHtcbiAgICAgIC8vIFVSTCBpcyBub3QgdmFsaWRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc090aGVyTG9hZGluZ0NhbGxiYWNrKCkpIHtcbiAgICAgIC8vIEFwcGxpY2F0aW9uIGlzIGN1cnJlbnRseSByZWxvYWRpbmdcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodXJsID09PSB3aW5kb3cubG9jYXRpb24uaHJlZiAmJiBoaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgLy8gVVJMIGFscmVhZHkgaXMgbG9hZGVkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc2VsZi5faXNMb2FkaW5nID0gdHJ1ZTtcbiAgICBzZWxmLm9uTG9hZFN0YXJ0ZWRDYWxsYmFjayh0cnVlLCBmYWxzZSk7XG5cbiAgICAkLnBqYXgoe1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBzY3JvbGxUbzogMCxcbiAgICAgIGNvbnRhaW5lcjogc2VsZi5tYWluQ29udGFpbmVySWRcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wTG9hZGluZygpIHtcbiAgICBpZiAoIXRoaXMuX2lzTG9hZGluZykgcmV0dXJuO1xuICAgIHRoaXMuY2xlYW5MaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmNhbmNlbFJlcXVlc3QoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW5MaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5faXNMb2FkaW5nID0gZmFsc2U7XG4gICAgJChcImJvZHlcIikub2ZmKFwicGpheDpjb21wbGV0ZVwiKTtcbiAgICAkKFwiYm9keVwiKS5vZmYoXCJwamF4OmVycm9yXCIpO1xuICAgICQoXCJib2R5XCIpLm9mZihcInBqYXg6dGltZW91dFwiKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkT25GaW5pc2hMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAkKFwiYm9keVwiKVxuICAgICAgLm9mZihcInBqYXg6Y29tcGxldGVcIilcbiAgICAgIC5vbihcInBqYXg6Y29tcGxldGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuY2xlYW5MaXN0ZW5lcnMoKTtcbiAgICAgICAgc2VsZi5vbkxvYWRGaW5pc2hDYWxsYmFjayh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgJChcImJvZHlcIilcbiAgICAgIC5vZmYoXCJwamF4OmVycm9yXCIpXG4gICAgICAub24oXCJwamF4OmVycm9yXCIsIGZ1bmN0aW9uKGV2ZW50LCB4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duLCBvcHRpb25zKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNlbGYuY2xlYW5MaXN0ZW5lcnMoKTtcbiAgICAgICAgb3B0aW9ucy5zdWNjZXNzKHhoci5yZXNwb25zZVRleHQsIHRleHRTdGF0dXMsIHhocik7XG4gICAgICAgIHNlbGYuY2FuY2VsUmVxdWVzdCh4aHIpO1xuICAgICAgICBzZWxmLm9uTG9hZEZpbmlzaENhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICAkKFwiYm9keVwiKVxuICAgICAgLm9mZihcInBqYXg6dGltZW91dFwiKVxuICAgICAgLm9uKFwicGpheDp0aW1lb3V0XCIsIGZ1bmN0aW9uKGV2ZW50LCB4aHIsIG9wdGlvbnMpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZi5jbGVhbkxpc3RlbmVycygpO1xuICAgICAgICBzZWxmLmNhbmNlbFJlcXVlc3QoeGhyKTtcblxuICAgICAgICAvLyBIYXJkIHJlYWxvZCB0aGUgVVJMXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gY3VycmVudFVybDtcblxuICAgICAgICBzZWxmLm9uTG9hZEZpbmlzaENhbGxiYWNrKGZhbHNlKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZWxvYWRPbkdvaW5nQmFjaygpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNlbGYucmVsb2FkUGFnZSh0cnVlKTtcbiAgICB9O1xuICB9XG59XG4iXX0=
